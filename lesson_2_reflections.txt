*What happens when you initialize a repository? Why do you need to do it?

We can initialize a repository with 'git init', when we do it, we get a initialized empty Git repository.
We can check our repository status with 'git status' If we use it just after the initialization it will gives us as response that the initialized directory has became the master branch and the command gives us all the untracked files we have on the directory.

We can add new files to our repository with 'git add' (git add lesson_2_reflections.txt) and we can remove any file using 'git reset' (git reset lesson_2_reflections.txt).


*How is the staging area different from the working directory and the repository? What value do you think it offers?

In the staging area are all the files of which we are keeping track, it isn't a phisical directory as it is the working directory. In our working directory we can have files we are not interested on tracking, maybe some photo or some resource we won't modify, the staging area allow us to decide which files of our working directory will be controlled. 


*How can you use the staging area to make sure you have one commit per logical change?
Using 'get diff' we get the differences between our updated files and the ones in the staged area, so we can check the changes, we can choose one file, add it and commit, check again, choose another file,...


*What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches will be helpful if we want to create a new version and keep the previous one, for example, some experimental version with some new feature, or if we want to make a different language version,...
Using a new branch we can always use our master branch without needing to remember the commit ID where we started to modify our project.


*How do the diagrams help you visualize the branch structure?
It is specially helpful  when we checkout a previous commit and we make some changes and commit to them, we will be in a new branch without any name, so if we go back to other branch, master,... those last changes will be lost.
We can easily see this on a diagram, and if we don't want to lose those commits we can create a new branch (git branch -b [new-branch-name])


*What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
When we merge two branches together, the branch we are mentioning  at the command is joined to the one we are at. The merge command will compare the branches we want to join with the last common node they had, it will choose the lines according to the last modification they had on their branches.
After merging two branches, we can delete the joined branch because all the commits are accesible from the main branch.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic merging has the advantage of not having to check all the code searching for differences. Git merges all the files and asks about conclicts.



COMMIT MESSAGES
A commit messages consists of three distinct parts separated by a blank line: the title, an optional body and an optional footer. 

type: subject

body

footer


The Type
The type is contained within the title and can be one of these types:

feat: a new feature
fix: a bug fix
docs: changes to documentation
style: formatting, missing semi colons, etc; no code change
refactor: refactoring production code
test: adding tests, refactoring test; no production code change
chore: updating build tasks, package manager configs, etc; no production code change
The Subject
Subjects should be no greater than 50 characters, should begin with a capital letter and do not end with a period.

Use an imperative tone to describe what a commit does, rather than what it did. For example, use change; not changed or changes.

The Body
Not all commits are complex enough to warrant a body, therefore it is optional and only used when a commit requires a bit of explanation and context. Use the body to explain the what and why of a commit, not the how.

When writing a body, the blank line between the title and the body is required and you should limit the length of each line to no more than 72 characters.

The Footer
The footer is optional and is used to reference issue tracker IDs.